{
  "type": "object",
  "properties": {
    "service": {
      "type": "object",
      "description": "DC/OS service configuration properties",
      "properties": {
        "name" : {
          "description": "The name of the service instance",
          "type": "string",
          "default": "hdfs"
        },
        "virtual_network_enabled": {
          "description": "Enable virtual networking",
          "type": "boolean",
          "default": false
        },
        "virtual_network_name": {
          "description": "The name of the virtual network to join",
          "type": "string",
          "default": "dcos"
        },
        "virtual_network_plugin_labels": {
          "description": "Labels to pass to the virtual network plugin. Comma-separated key:value pairs. For example: k_0:v_0,k_1:v_1,...,k_n:v_n",
          "type": "string",
          "default": ""
        },
        "user": {
          "type": "string",
          "description": "The linux user used to run the scheduler and all executors.",
          "default": "nobody"
        },
        "service_account" : {
          "description": "The service account for DC/OS service authentication. This is typically left empty to use the default unless service authentication is needed. The value given here is passed as the principal of Mesos framework.",
          "type": "string",
          "default": ""
        },
        "mesos_api_version": {
          "description": "Configures the Mesos API version to use. Possible values: V0 (non-HTTP), V1 (HTTP)",
          "type": "string",
          "default": "V0"
        },
        "service_account_secret": {
          "description": "Name of the Secret Store credentials to use for DC/OS service authentication. This should be left empty unless service authentication is needed.",
          "type": "string",
          "default": ""
        },
        "deploy_strategy": {
          "description": "HDFS deployment strategy. [parallel, serial]",
          "type": "string",
          "default": "parallel",
          "enum" : ["parallel", "serial"]
        },
        "update_strategy": {
          "description": "HDFS update strategy. [parallel, serial]",
          "type": "string",
          "default": "serial",
          "enum" : ["parallel", "serial"]
        },
        "log_level": {
          "description": "The log level for the DC/OS service.",
          "type": "string",
          "enum": ["OFF", "FATAL", "ERROR", "WARN", "INFO", "DEBUG", "TRACE", "ALL"],
          "default": "INFO"
        },
        "tls": {
          "type": "object",
          "description": "TLS configuration properties.",
          "properties": {
            "enabled": {
              "description": "Enable TLS support (requires Strict mode).",
              "type": "boolean",
              "default": false
            }
          }
        },
        "kerberos": {
          "type": "object",
          "description": "Kerberos configuration properties.",
          "properties": {
            "enabled": {
              "description": "Enable kerberos authentication.",
              "type": "boolean",
              "default": false
            },
            "keytabs_uri": {
              "type": "string",
              "description": "The URI from which Keytabs tar.gz can be downloaded. Only relevant when secure_mode is enabled.",
              "default": ""
            },
            "krb5_conf_uri": {
              "type": "string",
              "description": "The URI of the krb5.conf file.  This file will be downloaded and used by each HDFS task."
            },
            "primary": {
              "type": "string",
              "description": "The Kerberos primary used by HDFS tasks.  The full principal will be <service.kerberos.primary>/<mesos_dns_address>@<service.kerberos.realm>",
              "default": "hdfs"
            },
            "primary_http": {
              "type": "string",
              "description": "The Kerberos primary used by the HTTP server running on HDFS tasks.  See <service.kerberos.primary>.",
              "default": "HTTP"
            },
            "realm": {
              "type": "string",
              "description": "The Kerberos realm used to render the principal of HDFS tasks.",
              "default": "LOCAL"
            }
          }
        }
      }
    },
    "journal_node": {
      "description":"HDFS configuration properties.",
      "type": "object",
      "properties": {
        "cpus": {
          "description": "Journal node CPU requirement",
          "type": "number",
          "default": 0.3
        },
        "mem": {
          "description": "Journal node memory requirement",
          "type": "number",
          "default": 2048
        },
        "disk": {
          "description": "Journal node disk size requirement in MB",
          "type": "number",
          "default": 5000
        },
        "disk_type": {
          "description": "Journal node disk type",
          "type": "string",
          "default": "ROOT"
        },
        "enable_readiness_check": {
          "description": "Determines whether to enable readiness checks for Journal Nodes.",
          "type": "boolean",
          "default": true
        },
        "lagging_tx_count": {
          "description": "The number of transactions that this JournalNode is lagging",
          "type": "integer",
          "default": 0
        }
      },
      "required": [
        "cpus",
        "mem",
        "disk",
        "disk_type"
      ]
    },
    "name_node": {
      "description": "HDFS configuration properties.",
      "type": "object",
      "properties": {
        "cpus": {
          "description": "Name node CPU requirement",
          "type": "number",
          "default": 0.3
        },
        "mem": {
          "description": "Name node memory requirement",
          "type": "number",
          "default": 2048
        },
        "disk": {
          "description": "Name node disk size requirement in MB",
          "type": "number",
          "default": 5000
        },
        "disk_type": {
          "description": "Name node disk type",
          "type": "string",
          "default": "ROOT"
        },
        "replication_considerLoad": {
          "description": "Decide if chooseTarget considers the target's load or not",
          "type": "boolean",
          "default": true
        },
        "name_dir_restore": {
          "description": "Set to true to enable NameNode to attempt recovering a previously failed dfs.namenode.name.dir. When enabled, a recovery of any failed directory is attempted during checkpoint.",
          "type": "boolean",
          "default": false
        },
        "fs-limits_max-component-length": {
          "description": "Defines the maximum number of bytes in UTF-8 encoding in each component of a path. A value of 0 will disable the check.",
          "type": "integer",
          "default": 255
        },
        "fs-limits_max-directory-items": {
          "description": "Defines the maximum number of items that a directory may contain. A value of 0 will disable the check.",
          "type": "integer",
          "default": 1048576
        },
        "fs-limits_min-block-size": {
          "description": "Minimum block size in bytes, enforced by the Namenode at create time. This prevents the accidental creation of files with tiny block sizes (and thus many blocks), which can degrade performance.",
          "type": "integer",
          "default": 1048576
        },
        "fs-limits_max-blocks-per-file": {
          "description": "Maximum number of blocks per file, enforced by the Namenode on write. This prevents the creation of extremely large files which can degrade performance.",
          "type": "integer",
          "default": 1048576
        },
        "acls_enabled": {
          "type": "boolean",
          "description": "Set to true to enable support for HDFS ACLs (Access Control Lists). By default, ACLs are disabled. When ACLs are disabled, the NameNode rejects all RPCs related to setting or getting ACLs.",
          "default": false
        },
        "lazypersist_file_scrub_interval_sec": {
          "type": "integer",
          "description": "The NameNode periodically scans the namespace for LazyPersist files with missing blocks and unlinks them from the namespace. This configuration key controls the interval between successive scans. Set it to a negative value to disable this behavior.",
          "default": 300
        },
        "replication_min": {
          "type": "integer",
          "description": "Minimal block replication.",
          "default": 1
        },
        "handler_count": {
          "type": "integer",
          "description": "The number of server threads for the namenode.",
          "default": 10
        },
        "safemode_threshold-pct": {
          "type": "string",
          "description": "Specifies the percentage of blocks that should satisfy the minimal replication requirement defined by dfs.namenode.replication.min. Values less than or equal to 0 mean not to wait for any particular percentage of blocks before exiting safemode. Values greater than 1 will make safe mode permanent.",
          "default": "0.999f"
        },
        "safemode_min_datanodes": {
          "type": "integer",
          "description": "Specifies the number of datanodes that must be considered alive before the name node exits safemode. Values less than or equal to 0 mean not to take the number of live datanodes into account when deciding whether to remain in safe mode during startup. Values greater than the number of datanodes in the cluster will make safe mode permanent.",
          "default": 0
        },
        "safemode_extension": {
          "type": "integer",
          "description": "Determines extension of safe mode in milliseconds after the threshold level is reached.",
          "default": 30000
        },
        "resource_check_interval": {
          "type": "integer",
          "description": "The interval in milliseconds at which the NameNode resource checker runs. The checker calculates the number of the NameNode storage volumes whose available spaces are more than dfs.namenode.resource.du.reserved, and enters safemode if the number becomes lower than the minimum value specified by dfs.namenode.resource.checked.volumes.minimum.",
          "default": 5000
        },
        "resource_du_reserved": {
          "type": "integer",
          "description": "The amount of space to reserve/require for a NameNode storage directory in bytes. The default is 100MB.",
          "default": 104857600
        },
        "resource_checked_volumes": {
          "type": "string",
          "description": "A list of local directories for the NameNode resource checker to check in addition to the local edits directories.",
          "default": ""
        },
        "resource_checked_volumes_minimum": {
          "type": "integer",
          "description": "The minimum number of redundant NameNode storage volumes required.",
          "default": 1
        },
        "max_objects": {
          "type": "integer",
          "description": "The maximum number of files, directories and blocks dfs supports. A value of zero indicates no limit to the number of objects that dfs supports.",
          "default": 0
        },
        "decommission_interval": {
          "type": "integer",
          "description": "Namenode periodicity in seconds to check if decommission is complete.",
          "default": 30
        },
        "decommission_nodes_per_interval": {
          "type": "integer",
          "description": "The number of nodes namenode checks if decommission is complete in each dfs.namenode.decommission.interval.",
          "default": 5
        },
        "replication_interval": {
          "type": "integer",
          "description": "The periodicity in seconds with which the namenode computes repliaction work for datanodes.",
          "default": 3
        },
        "accesstime_precision": {
          "type": "integer",
          "description": "The access time for HDFS file is precise upto this value. The default value is 1 hour. Setting a value of 0 disables access times for HDFS.",
          "default": 3600000
        },
        "plugins": {
          "type": "string",
          "description": "Comma-separated list of namenode plug-ins to be activated.",
          "default": ""
        },
        "checkpoint_period": {
          "type": "integer",
          "description": "The number of seconds between two periodic checkpoints.",
          "default": 3600
        },
        "checkpoint_txns": {
          "type": "integer",
          "description": "The Secondary NameNode or CheckpointNode will create a checkpoint of the namespace every 'dfs.namenode.checkpoint.txns' transactions, regardless of whether 'dfs.namenode.checkpoint.period' has expired.",
          "default": 1000000
        },
        "checkpoint_check_period": {
          "type": "integer",
          "description": "The SecondaryNameNode and CheckpointNode will poll the NameNode every 'dfs.namenode.checkpoint.check.period' seconds to query the number of uncheckpointed transactions.",
          "default": 60
        },
        "checkpoint_max-retries": {
          "type": "integer",
          "description": "The SecondaryNameNode retries failed checkpointing. If the failure occurs while loading fsimage or replaying edits, the number of retries is limited by this variable.",
          "default": 3
        },
        "num_checkpoints_retained": {
          "type": "integer",
          "description": "The number of image checkpoint files that will be retained by the NameNode and Secondary NameNode in their storage directories. All edit logs necessary to recover an up-to-date namespace from the oldest retained checkpoint will also be retained.",
          "default": 2
        },
        "num_extra_edits_retained": {
          "type": "integer",
          "description": "The number of extra transactions which should be retained beyond what is minimally necessary for a NN restart. This can be useful for audit purposes or for an HA setup where a remote Standby Node may have been offline for some time and need to have a longer backlog of retained edits in order to start again. Typically each edit is on the order of a few hundred bytes, so the default of 1 million edits should be on the order of hundreds of MBs or low GBs. NOTE: Fewer extra edits may be retained than value specified for this setting if doing so would mean that more segments would be retained than the number configured by dfs.namenode.max.extra.edits.segments.retained.",
          "default": 1000000
        },
        "max_extra_edits_segments_retained": {
          "type": "integer",
          "description": "The maximum number of extra edit log segments which should be retained beyond what is minimally necessary for a NN restart. When used in conjunction with dfs.namenode.num.extra.edits.retained, this configuration property serves to cap the number of extra edits files to a reasonable value.",
          "default": 10000
        },
        "delegation_key_update-interval": {
          "type": "integer",
          "description": "The update interval for master key for delegation tokens in the namenode in milliseconds.",
          "default": 86400000
        },
        "delegation_token_max-lifetime": {
          "type": "integer",
          "description": "The maximum lifetime in milliseconds for which a delegation token is valid.",
          "default": 604800000
        },
        "delegation_token_renew-interval": {
          "type": "integer",
          "description": "The renewal interval for delegation token in milliseconds.",
          "default": 86400000
        },
        "support_allow_format": {
          "type": "boolean",
          "description": "Does HDFS namenode allow itself to be formatted? You may consider setting this to false for any production cluster, to avoid any possibility of formatting a running DFS.",
          "default": true
        },
        "avoid_read_stale_datanode": {
          "type": "boolean",
          "description": "Indicate whether or not to avoid reading from 'stale' datanodes whose heartbeat messages have not been received by the namenode for more than a specified time interval. Stale datanodes will be moved to the end of the node list returned for reading. See dfs.namenode.avoid.write.stale.datanode for a similar setting for writes.",
          "default": false
        },
        "avoid_write_stale_datanode": {
          "type": "boolean",
          "description": "Indicate whether or not to avoid writing to 'stale' datanodes whose heartbeat messages have not been received by the namenode for more than a specified time interval. Writes will avoid using stale datanodes unless more than a configured ratio (dfs.namenode.write.stale.datanode.ratio) of datanodes are marked as stale. See dfs.namenode.avoid.read.stale.datanode for a similar setting for reads.",
          "default": false
        },
        "stale_datanode_interval": {
          "type": "integer",
          "description": "Default time interval for marking a datanode as 'stale', i.e., if the namenode has not received heartbeat msg from a datanode for more than this time interval, the datanode will be marked and treated as 'stale' by default. The stale interval cannot be too small since otherwise this may cause too frequent change of stale states. We thus set a minimum stale interval value (the default value is 3 times of heartbeat interval) and guarantee that the stale interval cannot be less than the minimum value. A stale data node is avoided during lease/block recovery. It can be conditionally avoided for reads (see dfs.namenode.avoid.read.stale.datanode) and for writes (see dfs.namenode.avoid.write.stale.datanode).",
          "default": 30000
        },
        "write_stale_datanode_ratio": {
          "type": "string",
          "description": "When the ratio of number stale datanodes to total datanodes marked is greater than this ratio, stop avoiding writing to stale nodes so as to prevent causing hotspots.",
          "default": "0.5f"
        },
        "invalidate_work_pct_per_iteration": {
          "type": "string",
          "description": "*Note*: Advanced property. Change with caution. This determines the percentage amount of block invalidations (deletes) to do over a single DN heartbeat deletion command. The final deletion count is determined by applying this percentage to the number of live nodes in the system. The resultant number is the number of blocks from the deletion list chosen for proper invalidation over a single heartbeat of a single DN. Value should be a positive, non-zero percentage in float notation (X.Yf), with 1.0f meaning 100%.",
          "default": "0.32f"
        },
        "replication_work_multiplier_per_iteration": {
          "type": "integer",
          "description": "*Note*: Advanced property. Change with caution. This determines the total amount of block transfers to begin in parallel at a DN, for replication, when such a command list is being sent over a DN heartbeat by the NN. The actual number is obtained by multiplying this multiplier with the total number of live nodes in the cluster. The result number is the number of blocks to begin transfers immediately for, per DN heartbeat. This number can be any positive, non-zero integer.",
          "default": 2
        },
        "audit_loggers": {
          "type": "string",
          "description": "List of classes implementing audit loggers that will receive audit events. These should be implementations of org.apache.hadoop.hdfs.server.namenode.AuditLogger. The special value 'default' can be used to reference the default audit logger, which uses the configured log system. Installing custom audit loggers may affect the performance and stability of the NameNode. Refer to the custom logger's documentation for more details.",
          "default": "default"
        },
        "edits_noeditlogchannelflush": {
          "type": "boolean",
          "description": "Specifies whether to flush edit log file channel. When set, expensive FileChannel#force calls are skipped and synchronous disk writes are enabled instead by opening the edit log file with RandomAccessFile('rws') flags. This can significantly improve the performance of edit log writes on the Windows platform. Note that the behavior of the 'rws' flags is platform and hardware specific and might not provide the same level of guarantees as FileChannel#force. For example, the write will skip the disk-cache on SAS and SCSI devices while it might not on SATA devices. This is an expert level setting, change with caution.",
          "default": false
        },
        "enable_retrycache": {
          "type": "boolean",
          "description": "This enables the retry cache on the namenode. Namenode tracks for non-idempotent requests the corresponding response. If a client retries the request, the response from the retry cache is sent. Such operations are tagged with annotation @AtMostOnce in namenode protocols. It is recommended that this flag be set to true. Setting it to false, will result in clients getting failure responses to retried request. This flag must be enabled in HA setup for transparent fail-overs. The entries in the cache have expiration time configurable using dfs.namenode.retrycache.expirytime.millis.",
          "default": true
        },
        "retrycache_expirytime_millis": {
          "type": "integer",
          "description": "The time for which retry cache entries are retained.",
          "default": 600000
        },
        "retrycache_heap_percent": {
          "type": "string",
          "description": "This parameter configures the heap size allocated for retry cache (excluding the response cached). This corresponds to approximately 4096 entries for every 64MB of namenode process java heap size. Assuming retry cache entry expiration time (configured using dfs.namenode.retrycache.expirytime.millis) of 10 minutes, this enables retry cache to support 7 operations per second sustained for 10 minutes. As the heap size is increased, the operation rate linearly increases.",
          "default": "0.03f"
        },
        "path_based_cache_block_map_allocation_percent": {
          "type": "number",
          "description": "The percentage of the Java heap which we will allocate to the cached blocks map. The cached blocks map is a hash map which uses chained hashing. Smaller maps may be accessed more slowly if the number of cached blocks is large; larger maps will consume more memory.",
          "default": 0.25
        },
        "list_cache_directives_num_responses": {
          "type": "integer",
          "description": "This value controls the number of cache directives that the NameNode will send over the wire in response to a listDirectives RPC.",
          "default": 100
        },
        "list_cache_pools_num_responses": {
          "type": "integer",
          "description": "This value controls the number of cache pools that the NameNode will send over the wire in response to a listPools RPC.",
          "default": 100
        },
        "path_based_cache_refresh_interval_ms": {
          "type": "integer",
          "description": "The amount of milliseconds between subsequent path cache rescans. Path cache rescans are when we calculate which blocks should be cached, and on what datanodes. By default, this parameter is set to 30 seconds.",
          "default": 30000
        },
        "path_based_cache_retry_interval_ms": {
          "type": "integer",
          "description": "When the NameNode needs to uncache something that is cached, or cache something that is not cached, it must direct the DataNodes to do so by sending a DNA_CACHE or DNA_UNCACHE command in response to a DataNode heartbeat. This parameter controls how frequently the NameNode will resend these commands.",
          "default": 30000
        },
        "edit_log_autoroll_multiplier_threshold": {
          "type": "number",
          "description": "Determines when an active namenode will roll its own edit log. The actual threshold (in number of edits) is determined by multiplying this value by dfs.namenode.checkpoint.txns. This prevents extremely large edit files from accumulating on the active namenode, which can cause timeouts during namenode startup and pose an administrative hassle. This behavior is intended as a failsafe for when the standby or secondary namenode fail to roll the edit log by the normal checkpoint threshold.",
          "default": 2.0
        },
        "edit_log_autoroll_check_interval_ms": {
          "type": "integer",
          "description": "How often an active namenode will check if it needs to roll its edit log, in milliseconds.",
          "default": 300000
        },
        "reject-unresolved-dn-topology-mapping": {
          "type": "boolean",
          "description": "If the value is set to true, then namenode will reject datanode registration if the topology mapping for a datanode is not resolved and NULL is returned (script defined by net.topology.script.file.name fails to execute). Otherwise, datanode will be registered and the default rack will be assigned as the topology path. Topology paths are important for data resiliency, since they define fault domains. Thus it may be unwanted behavior to allow datanode registration with the default rack if the resolving topology failed.",
          "default": false
        },
        "xattrs_enabled": {
          "type": "boolean",
          "description": "Whether support for extended attributes is enabled on the NameNode.",
          "default": true
        },
        "fs-limits_max-attrs-per-inode": {
          "type": "integer",
          "description": "Maximum number of extended attributes per inode.",
          "default": 32
        },
        "fs-limits_max-attrs-size": {
          "type": "integer",
          "description": "The maximum combined size of the name and value of an extended attribute in bytes.",
          "default": 16384
        },
        "startup_delay_block_deletion_sec": {
          "type": "integer",
          "description": "The delay in seconds at which we will pause the blocks deletion after Namenode startup. By default it's disabled. In the case a directory has large number of directories and files are deleted, suggested delay is one hour to give the administrator enough time to notice large number of pending deletion blocks and take corrective action.",
          "default": 0
        },
        "list_encryption_zones_num_responses": {
          "type": "integer",
          "description": "When listing encryption zones, the maximum number of zones that will be returned in a batch. Fetching the list incrementally in batches improves namenode performance.",
          "default": 100
        },
        "inotify_max_events_per_rpc": {
          "type": "integer",
          "description": "Maximum number of events that will be sent to an inotify client in a single RPC response. The default value attempts to amortize away the overhead for this RPC while avoiding huge memory requirements for the client and NameNode (1000 events should consume no more than 1 MB.)",
          "default": 1000
        },
        "legacy-oiv-image_dir": {
          "type": "string",
          "description": "Determines where to save the namespace in the old fsimage format during checkpointing by standby NameNode or SecondaryNameNode. Users can dump the contents of the old format fsimage by oiv_legacy command. If the value is not specified, old format fsimage will not be saved in checkpoint.",
          "default": ""
        }
      },
      "required": [
        "cpus",
        "mem",
        "disk",
        "disk_type",
        "replication_considerLoad",
        "name_dir_restore",
        "fs-limits_max-component-length",
        "fs-limits_max-directory-items",
        "fs-limits_min-block-size",
        "fs-limits_max-blocks-per-file",
        "acls_enabled",
        "lazypersist_file_scrub_interval_sec",
        "replication_min",
        "handler_count",
        "safemode_threshold-pct",
        "safemode_min_datanodes",
        "safemode_extension",
        "resource_check_interval",
        "resource_du_reserved",
        "resource_checked_volumes_minimum",
        "max_objects",
        "decommission_interval",
        "decommission_nodes_per_interval",
        "replication_interval",
        "accesstime_precision",
        "checkpoint_period",
        "checkpoint_txns",
        "checkpoint_check_period",
        "checkpoint_max-retries",
        "num_checkpoints_retained",
        "num_extra_edits_retained",
        "max_extra_edits_segments_retained",
        "delegation_key_update-interval",
        "delegation_token_max-lifetime",
        "delegation_token_renew-interval",
        "support_allow_format",
        "avoid_read_stale_datanode",
        "avoid_write_stale_datanode",
        "stale_datanode_interval",
        "write_stale_datanode_ratio",
        "invalidate_work_pct_per_iteration",
        "audit_loggers",
        "edits_noeditlogchannelflush",
        "enable_retrycache",
        "retrycache_expirytime_millis",
        "retrycache_heap_percent",
        "path_based_cache_block_map_allocation_percent",
        "list_cache_directives_num_responses",
        "list_cache_pools_num_responses",
        "path_based_cache_refresh_interval_ms",
        "path_based_cache_retry_interval_ms",
        "edit_log_autoroll_multiplier_threshold",
        "edit_log_autoroll_check_interval_ms",
        "reject-unresolved-dn-topology-mapping",
        "xattrs_enabled",
        "fs-limits_max-attrs-per-inode",
        "fs-limits_max-attrs-size",
        "startup_delay_block_deletion_sec",
        "list_encryption_zones_num_responses",
        "inotify_max_events_per_rpc"
      ]
    },
    "zkfc_node": {
      "description":"HDFS configuration properties.",
      "type": "object",
      "properties": {
        "cpus": {
          "description": "ZKFC node CPU requirement",
          "type": "number",
          "default": 0.3
        },
        "mem": {
          "description": "ZKFC node memory requirement",
          "type": "number",
          "default": 2048
        }
      },
      "required": [
        "cpus",
        "mem"
      ]
    },
    "data_node":{
      "description":"HDFS configuration properties.",
      "type":"object",
      "properties":{
        "count":{
          "description":"Data node count requirement",
          "type":"number",
          "default": 3
        },
        "cpus":{
          "description":"Data node CPU requirement",
          "type":"number",
          "default": 0.3
        },
        "mem":{
          "description":"Data node memory requirement",
          "type":"number",
          "default": 2048
        },
        "disk":{
          "description":"Data node disk size requirement in MB",
          "type":"number",
          "default": 5000
        },
        "disk_type":{
          "description":"Data node disk type",
          "type":"string",
          "default": "ROOT"
        },
        "handler_count": {
          "description": "The number of server threads for the datanode.",
          "type": "integer",
          "default": 10
        },
        "dns_interface": {
          "type": "string",
          "description": "The name of the Network Interface from which a data node should report its IP address.",
          "default": "default"
        },
        "dns_nameserver": {
          "type": "string",
          "description": "The host name or IP address of the name server (DNS) which a DataNode should use to determine the host name used by the NameNode for communication and display purposes.",
          "default": "default"
        },
        "du_reserved": {
          "type": "integer",
          "description": "Reserved space in bytes per volume. Always leave this much space free for non dfs use.",
          "default": 0
        },
        "directoryscan_interval": {
          "type": "integer",
          "description": "Interval in seconds for Datanode to scan data directories and reconcile the difference between blocks in memory and on the disk.",
          "default": 21600
        },
        "directoryscan_threads": {
          "type": "integer",
          "description": "How many threads should the threadpool used to compile reports for volumes in parallel have.",
          "default": 1
        },
        "balance_bandwidthPerSec": {
          "type": "integer",
          "description": "Specifies the maximum amount of bandwidth that each datanode can utilize for the balancing purpose in term of the number of bytes per second.",
          "default": 1048576
        },
        "plugins": {
          "type": "string",
          "description": "Comma-separated list of datanode plug-ins to be activated.",
          "default": ""
        },
        "failed_volumes_tolerated": {
          "type": "integer",
          "description": "The number of volumes that are allowed to fail before a datanode stops offering service. By default any volume failure will cause a datanode to shutdown.",
          "default": 0
        },
        "max_transfer_threads": {
          "type": "integer",
          "description": "Specifies the maximum number of threads to use for transferring data in and out of the DN.",
          "default": 4096
        },
        "readahead_bytes": {
          "type": "integer",
          "description": "While reading block files, if the Hadoop native libraries are available, the datanode can use the posix_fadvise system call to explicitly page data into the operating system buffer cache ahead of the current reader's position. This can improve performance especially when disks are highly contended. This configuration specifies the number of bytes ahead of the current read position which the datanode will attempt to read ahead. This feature may be disabled by configuring this property to 0. If the native libraries are not available, this configuration has no effect.",
          "default": 4193404
        },
        "drop_cache_behind_reads": {
          "type": "boolean",
          "description": "In some workloads, the data read from HDFS is known to be significantly large enough that it is unlikely to be useful to cache it in the operating system buffer cache. In this case, the DataNode may be configured to automatically purge all data from the buffer cache after it is delivered to the client. This behavior is automatically disabled for workloads which read only short sections of a block (e.g HBase random-IO workloads). This may improve performance for some workloads by freeing buffer cache spage usage for more cacheable data. If the Hadoop native libraries are not available, this configuration has no effect.",
          "default": false
        },
        "drop_cache_behind_writes": {
          "type": "boolean",
          "description": "In some workloads, the data written to HDFS is known to be significantly large enough that it is unlikely to be useful to cache it in the operating system buffer cache. In this case, the DataNode may be configured to automatically purge all data from the buffer cache after it is written to disk. This may improve performance for some workloads by freeing buffer cache spage usage for more cacheable data. If the Hadoop native libraries are not available, this configuration has no effect.",
          "default": false
        },
        "sync_behind_writes": {
          "type": "boolean",
          "description": "If this configuration is enabled, the datanode will instruct the operating system to enqueue all written data to the disk immediately after it is written. This differs from the usual OS policy which may wait for up to 30 seconds before triggering writeback. This may improve performance for some workloads by smoothing the IO profile for data written to disk. If the Hadoop native libraries are not available, this configuration has no effect.",
          "default": false
        },
        "use_datanode_hostname": {
          "type": "boolean",
          "description": "Whether datanodes should use datanode hostnames when connecting to other datanodes for data transfer.",
          "default": false
        },
        "shared_file_descriptor_paths": {
          "type": "string",
          "description": "A comma-separated list of paths to use when creating file descriptors that will be shared between the DataNode and the DFSClient. Typically we use /dev/shm, so that the file descriptors will not be written to disk. Systems that don't have /dev/shm will fall back to /tmp by default.",
          "default": "/dev/shm,/tmp"
        },
        "hdfs-blocks-metadata_enabled": {
          "type": "boolean",
          "description": "Boolean which enables backend datanode-side support for the experimental DistributedFileSystem#getFileVBlockStorageLocations API.",
          "default": false
        },
        "available-space-volume-choosing-policy_balanced-space-threshold": {
          "type": "integer",
          "description": "Only used when the dfs.datanode.fsdataset.volume.choosing.policy is set to org.apache.hadoop.hdfs.server.datanode.fsdataset.AvailableSpaceVolumeChoosingPolicy. This setting controls how much DN volumes are allowed to differ in terms of bytes of free disk space before they are considered imbalanced. If the free space of all the volumes are within this range of each other, the volumes will be considered balanced and block assignments will be done on a pure round robin basis.",
          "default": 10737418240
        },
        "available-space-volume-choosing-policy_balanced-space-preference-fraction": {
          "type": "string",
          "description": "Only used when the dfs.datanode.fsdataset.volume.choosing.policy is set to org.apache.hadoop.hdfs.server.datanode.fsdataset.AvailableSpaceVolumeChoosingPolicy. This setting controls what percentage of new block allocations will be sent to volumes with more available disk space than others. This setting should be in the range 0.0 - 1.0, though in practice 0.5 - 1.0, since there should be no reason to prefer that volumes with less available disk space receive more block allocations.",
          "default": "0.75f"
        },
        "max_locked_memory": {
          "type": "integer",
          "description": "The amount of memory in bytes to use for caching of block replicas in memory on the datanode. The datanode's maximum locked memory soft ulimit (RLIMIT_MEMLOCK) must be set to at least this value, else the datanode will abort on startup. By default, this parameter is set to 0, which disables in-memory caching. If the native libraries are not available to the DataNode, this configuration has no effect.",
          "default": 0
        },
        "fsdatasetcache_max_threads_per_volume": {
          "type": "integer",
          "description": "The maximum number of threads per volume to use for caching new data on the datanode. These threads consume both I/O and CPU. This can affect normal datanode operations.",
          "default": 4
        },
        "slow_io_warning_threshold_ms": {
          "type": "integer",
          "description": "The threshold in milliseconds at which we will log a slow io warning in a datanode. By default, this parameter is set to 300 milliseconds.",
          "default": 300
        },
        "cache_revocation_timeout_ms": {
          "type": "integer",
          "description": "When the DFSClient reads from a block file which the DataNode is caching, the DFSClient can skip verifying checksums. The DataNode will keep the block file in cache until the client is done. If the client takes an unusually long time, though, the DataNode may need to evict the block file from the cache anyway. This value controls how long the DataNode will wait for the client to release a replica that it is reading without checksums.",
          "default": 900000
        },
        "cache_revocation_polling_ms": {
          "type": "integer",
          "description": "How often the DataNode should poll to see if the clients have stopped using a replica that the DataNode wants to uncache.",
          "default": 500
        },
        "block_id_layout_upgrade_threads": {
          "type": "integer",
          "description": "The number of threads to use when creating hard links from current to previous blocks during upgrade of a DataNode to block ID-based block layout (see HDFS-6482 for details on the layout).",
          "default": 12
        }
      },
      "required": [
        "cpus",
        "mem",
        "disk",
        "disk_type",
        "handler_count",
        "dns_interface",
        "dns_nameserver",
        "du_reserved",
        "directoryscan_interval",
        "directoryscan_threads",
        "balance_bandwidthPerSec",
        "failed_volumes_tolerated",
        "max_transfer_threads",
        "readahead_bytes",
        "drop_cache_behind_reads",
        "drop_cache_behind_writes",
        "sync_behind_writes",
        "use_datanode_hostname",
        "shared_file_descriptor_paths",
        "hdfs-blocks-metadata_enabled",
        "available-space-volume-choosing-policy_balanced-space-threshold",
        "available-space-volume-choosing-policy_balanced-space-preference-fraction",
        "max_locked_memory",
        "fsdatasetcache_max_threads_per_volume",
        "slow_io_warning_threshold_ms",
        "cache_revocation_timeout_ms",
        "cache_revocation_polling_ms",
        "block_id_layout_upgrade_threads"
      ]
    },
    "hdfs": {
      "type": "object",
      "description": "HDFS File System configuration options",
      "properties": {
        "administrators": {
          "type": "string",
          "description": "Administrators for the HDFS cluster",
          "default": "core,centos,azureuser"
        },
        "name_node_rpc_port": {
          "type": "integer",
          "description": "The RPC port for HDFS Name Nodes.",
          "default": 9001
        },
        "name_node_http_port": {
          "type": "integer",
          "description": "The HTTP port for HDFS Name Nodes. ",
          "default": 9002
        },
        "zkfc_port": {
          "type": "integer",
          "description": "The port for ZKFC Nodes. ",
          "default": 8019
        },
        "journal_node_rpc_port": {
          "type": "integer",
          "description": "The RPC port used by Journal Nodes.",
          "default": 8485
        },
        "journal_node_http_port": {
          "type": "integer",
          "description": "The HTTP port used by Journal Nodes.",
          "default": 8480
        },
        "data_node_rpc_port": {
          "type": "integer",
          "description": "The RPC port used by Data Nodes.",
          "default": 9003
        },
        "data_node_http_port": {
          "type": "integer",
          "description": "The HTTP port used by Data Nodes.",
          "default": 9004
        },
        "data_node_ipc_port": {
          "type": "integer",
          "description": "The IPS port used by Data Nodes.",
          "default": 9005
        },
        "permissions_enabled": {
          "type": "boolean",
          "description": "If true, permissions checking is enabled",
          "default": false
        },
        "name_node_heartbeat_recheck_interval": {
          "type": "integer",
          "description": "This time decides the interval to check for expired datanodes.",
          "default": 60000
        },
        "compress_image": {
          "type": "boolean",
          "description": "If true, the File System image will be compressed.",
          "default": true
        },
        "image_compression_codec": {
          "type": "string",
          "description": "The image compression codec for the File System image.",
          "default": "org.apache.hadoop.io.compress.SnappyCodec"
        },
        "hadoop_root_logger": {
          "type": "string",
          "description": "",
          "default": "INFO,console"
        },
        "ipc_client_connect_max_retries": {
          "type": "integer",
          "description": "Indicates the number of retries a client will make to establish a server connection.",
          "default": 300
        },
        "namenode_logging_level": {
          "type": "string",
          "description": "The logging level for dfs namenode. Other values are 'dir' (trace namespace mutations), 'block'' (trace block under/over replications and block creations/deletions), or 'all'.",
          "default": "info"
        },
        "namenode_rpc-bind-host_name_node_0": {
          "type": "string",
          "description": "The actual address the RPC server will bind to. If this optional address is set, it overrides only the hostname portion of dfs.namenode.rpc-address. This is useful for making the name node listen on all interfaces by setting it to 0.0.0.0.",
          "default": "0.0.0.0"
        },
        "namenode_rpc-bind-host_name_node_1": {
          "type": "string",
          "description": "The actual address the RPC server will bind to. If this optional address is set, it overrides only the hostname portion of dfs.namenode.rpc-address. This is useful for making the name node listen on all interfaces by setting it to 0.0.0.0.",
          "default": "0.0.0.0"
        },
        "namenode_http-bind-host_name_node_0": {
          "type": "string",
          "description": "The actual adress the HTTP server will bind to. If this optional address is set, it overrides only the hostname portion of dfs.namenode.http-address. This is useful for making the name node HTTP server listen on all interfaces by setting it to 0.0.0.0.",
          "default": "0.0.0.0"
        },
        "namenode_http-bind-host_name_node_1": {
          "type": "string",
          "description": "The actual adress the HTTP server will bind to. If this optional address is set, it overrides only the hostname portion of dfs.namenode.http-address. This is useful for making the name node HTTP server listen on all interfaces by setting it to 0.0.0.0.",
          "default": "0.0.0.0"
        },
        "hadoop_hdfs_configuration_version": {
          "type": "integer",
          "description": "version of this configuration file",
          "default": 1
        },
        "namenode_servicerpc_address_namenode_0": {
          "type": "string",
          "description": "RPC address for HDFS Services communication. BackupNode, Datanodes and all other services should be connecting to this address if it is configured. If the value of this property is unset the value of dfs.namenode.rpc-address will be used as the default.",
          "default": ""
        },
        "namenode_servicerpc_address_namenode_1": {
          "type": "string",
          "description": "RPC address for HDFS Services communication. BackupNode, Datanodes and all other services should be connecting to this address if it is configured. If the value of this property is unset the value of dfs.namenode.rpc-address will be used as the default.",
          "default": ""
        },
        "namenode_servicerpc_bind_host_namenode_0": {
          "type": "string",
          "description": "The actual address the service RPC server will bind to. If this optional address is set, it overrides only the hostname portion of dfs.namenode.servicerpc-address. This is useful for making the name node listen on all interfaces by setting it to 0.0.0.0.",
          "default": ""
        },
        "namenode_servicerpc_bind_host_namenode_1": {
          "type": "string",
          "description": "The actual address the service RPC server will bind to. If this optional address is set, it overrides only the hostname portion of dfs.namenode.servicerpc-address. This is useful for making the name node listen on all interfaces by setting it to 0.0.0.0.",
          "default": ""
        },
        "client_cached_conn_retry": {
          "type": "integer",
          "description": "The number of times the HDFS client will pull a socket from the cache. Once this number is exceeded, the client will try to create a new socket.",
          "default": 3
        },
        "https_server_keystore_resource": {
          "type": "string",
          "description": "Resource file from which ssl server keystore information will be extracted",
          "default": "ssl-server.xml"
        },
        "client_https_keystore_resource": {
          "type": "string",
          "description": "Resource file from which ssl client keystore information will be extracted",
          "default": "ssl-client.xml"
        },
        "default_chunk_view_size": {
          "type": "integer",
          "description": "The number of bytes to view for a file on the browser.",
          "default": 32768
        },
        "permissions_superusergroup": {
          "type": "string",
          "description": "The name of the group of super-users.",
          "default": "supergroup"
        },
        "block_access_token_enable": {
          "type": "boolean",
          "description": "If 'true', access tokens are used as capabilities for accessing datanodes. If 'false', no access tokens are checked on accessing datanodes.",
          "default": false
        },
        "block_access_key_update_interval": {
          "type": "integer",
          "description": "Interval in minutes at which namenode updates its access keys.",
          "default": 600
        },
        "block_access_token_lifetime": {
          "type": "integer",
          "description": "The lifetime of access tokens in minutes.",
          "default": 600
        },
        "replication": {
          "type": "integer",
          "description": "Default block replication. The actual number of replications can be specified when the file is created. The default is used if replication is not specified in create time.",
          "default": 3
        },
        "replication_max": {
          "type": "integer",
          "description": "Maximal block replication.",
          "default": 512
        },
        "blocksize": {
          "type": "integer",
          "description": "The default block size for new files, in bytes. You can use the following suffix (case insensitive): k(kilo), m(mega), g(giga), t(tera), p(peta), e(exa) to specify the size (such as 128k, 512m, 1g, etc.), Or provide complete size in bytes (such as 134217728 for 128 MB).",
          "default": 134217728
        },
        "client_block_write_retries": {
          "type": "integer",
          "description": "The number of retries for writing blocks to the data nodes, before we signal failure to the application.",
          "default": 3
        },
        "client_block_write_replace-datanode-on-failure_enable": {
          "type": "boolean",
          "description": "If there is a datanode/network failure in the write pipeline, DFSClient will try to remove the failed datanode from the pipeline and then continue writing with the remaining datanodes. As a result, the number of datanodes in the pipeline is decreased. The feature is to add new datanodes to the pipeline. This is a site-wide property to enable/disable the feature. When the cluster size is extremely small, e.g. 3 nodes or less, cluster administrators may want to set the policy to NEVER in the default configuration file or disable this feature. Otherwise, users may experience an unusually high rate of pipeline failures since it is impossible to find new datanodes for replacement. See also dfs.client.block.write.replace-datanode-on-failure.policy",
          "default": true
        },
        "client_block_write_replace-datanode-on-failure_policy": {
          "type": "string",
          "description": "This property is used only if the value of dfs.client.block.write.replace-datanode-on-failure.enable is true. ALWAYS: always add a new datanode when an existing datanode is removed. NEVER: never add a new datanode. DEFAULT: Let r be the replication number. Let n be the number of existing datanodes. Add a new datanode only if r is greater than or equal to 3 and either (1) floor(r/2) is greater than or equal to n; or (2) r is greater than n and the block is hflushed/appended.",
          "default": "DEFAULT"
        },
        "client_block_write_replace-datanode-on-failure_best-effort": {
          "type": "boolean",
          "description": "This property is used only if the value of dfs.client.block.write.replace-datanode-on-failure.enable is true. Best effort means that the client will try to replace a failed datanode in write pipeline (provided that the policy is satisfied), however, it continues the write operation in case that the datanode replacement also fails. Suppose the datanode replacement fails. false: An exception should be thrown so that the write will fail. true : The write should be resumed with the remaining datandoes. Note that setting this property to true allows writing to a pipeline with a smaller number of datanodes. As a result, it increases the probability of data loss.",
          "default": false
        },
        "blockreport_intervalMsec": {
          "type": "integer",
          "description": "Determines block reporting interval in milliseconds.",
          "default": 21600000
        },
        "blockreport_initialDelay": {
          "type": "integer",
          "description": "Delay for first block report in seconds.",
          "default": 0
        },
        "blockreport_split_threshold": {
          "type": "integer",
          "description": "If the number of blocks on the DataNode is below this threshold then it will send block reports for all Storage Directories in a single message. If the number of blocks exceeds this threshold then the DataNode will send block reports for each Storage Directory in separate messages. Set to zero to always split.",
          "default": 1000000
        },
        "heartbeat_interval": {
          "type": "integer",
          "description": "Determines datanode heartbeat interval in seconds.",
          "default": 3
        },
        "hosts": {
          "type": "string",
          "description": "Names a file that contains a list of hosts that are permitted to connect to the namenode. The full pathname of the file must be specified. If the value is empty, all hosts are permitted.",
          "default": ""
        },
        "hosts_exclude": {
          "type": "string",
          "description": "Names a file that contains a list of hosts that are not permitted to connect to the namenode. The full pathname of the file must be specified. If the value is empty, no hosts are excluded.",
          "default": ""
        },
        "namenode_datanode_registration_ip-hostname-check": {
          "type": "boolean",
          "description": "If true (the default), then the namenode requires that a connecting datanode's address must be resolved to a hostname. If necessary, a reverse DNS lookup is performed. All attempts to register a datanode from an unresolvable address are rejected. It is recommended that this setting be left on to prevent accidental registration of datanodes listed by hostname in the excludes file during a DNS outage. Only set this to false in environments where there is no infrastructure to support reverse DNS lookup.",
          "default": true
        },
        "stream-buffer-size": {
          "type": "integer",
          "description": "The size of buffer to stream files. The size of this buffer should probably be a multiple of hardware page size (4096 on Intel x86), and it determines how much data is buffered during read and write operations.",
          "default": 4096
        },
        "bytes-per-checksum": {
          "type": "integer",
          "description": "The number of bytes per checksum. Must not be larger than dfs.stream-buffer-size",
          "default": 512
        },
        "client-write-packet-size": {
          "type": "integer",
          "description": "Packet size for clients to write.",
          "default": 65536
        },
        "client_write_exclude_nodes_cache_expiry_interval_millis": {
          "type": "integer",
          "description": "The maximum period to keep a DN in the excluded nodes list at a client. After this period, in milliseconds, the previously excluded node(s) will be removed automatically from the cache and will be considered good for block allocations again. Useful to lower or raise in situations where you keep a file open for very long periods (such as a Write-Ahead-Log (WAL) file) to make the writer tolerant to cluster maintenance restarts. Defaults to 10 minutes.",
          "default": 600000
        },
        "image_transfer_timeout": {
          "type": "integer",
          "description": "Socket timeout for image transfer in milliseconds. This timeout and the related dfs.image.transfer.bandwidthPerSec parameter should be configured such that normal image transfer can complete successfully. This timeout prevents client hangs when the sender fails during image transfer. This is socket timeout during image tranfer.",
          "default": 60000
        },
        "image_transfer_bandwidthPerSec": {
          "type": "integer",
          "description": "Maximum bandwidth used for image transfer in bytes per second. This can help keep normal namenode operations responsive during checkpointing. The maximum bandwidth and timeout in dfs.image.transfer.timeout should be set such that normal image transfers can complete successfully. A default value of 0 indicates that throttling is disabled.",
          "default": 0
        },
        "image_transfer_chunksize": {
          "type": "integer",
          "description": "Chunksize in bytes to upload the checkpoint. Chunked streaming is used to avoid internal buffering of contents of image file of huge size.",
          "default": 65536
        },
        "client_failover_max_attempts": {
          "type": "integer",
          "description": "Expert only. The number of client failover attempts that should be made before the failover is considered failed.",
          "default": 15
        },
        "client_failover_sleep_base_millis": {
          "type": "integer",
          "description": "Expert only. The time to wait, in milliseconds, between failover attempts increases exponentially as a function of the number of attempts made so far, with a random factor of +/- 50%. This option specifies the base value used in the failover calculation. The first failover will retry immediately. The 2nd failover attempt will delay at least dfs.client.failover.sleep.base.millis milliseconds. And so on.",
          "default": 500
        },
        "client_failover_sleep_max_millis": {
          "type": "integer",
          "description": "Expert only. The time to wait, in milliseconds, between failover attempts increases exponentially as a function of the number of attempts made so far, with a random factor of +/- 50%. This option specifies the maximum value to wait between failovers. Specifically, the time between two failover attempts will not exceed +/- 50% of dfs.client.failover.sleep.max.millis milliseconds.",
          "default": 15000
        },
        "client_failover_connection_retries": {
          "type": "integer",
          "description": "Expert only. Indicates the number of retries a failover IPC client will make to establish a server connection.",
          "default": 0
        },
        "client_failover_connection_retries_on_timeouts": {
          "type": "integer",
          "description": "Expert only. The number of retry attempts a failover IPC client will make on socket timeout when establishing a server connection.",
          "default": 0
        },
        "client_datanode-restart_timeout": {
          "type": "integer",
          "description": "Expert only. The time to wait, in seconds, from reception of an datanode shutdown notification for quick restart, until declaring the datanode dead and invoking the normal recovery mechanisms. The notification is sent by a datanode when it is being shutdown using the shutdownDatanode admin command with the upgrade option.",
          "default": 30
        },
        "ha_log-roll_period": {
          "type": "integer",
          "description": "How often, in seconds, the StandbyNode should ask the active to roll edit logs. Since the StandbyNode only reads from finalized log segments, the StandbyNode will only be as up-to-date as how often the logs are rolled. Note that failover triggers a log roll so the StandbyNode will be up to date before it becomes active.",
          "default": 120
        },
        "ha_tail-edits_period": {
          "type": "integer",
          "description": "How often, in seconds, the StandbyNode should check for new finalized log segments in the shared edits log.",
          "default": 60
        },
        "support_append": {
          "type": "boolean",
          "description": "Does HDFS allow appends to files?",
          "default": true
        },
        "client_use_datanode_hostname": {
          "type": "boolean",
          "description": "Whether clients should use datanode hostnames when connecting to datanodes.",
          "default": false
        },
        "client_local_interfaces": {
          "type": "string",
          "description": "A comma separated list of network interface names to use for data transfer between the client and datanodes. When creating a connection to read from or write to a datanode, the client chooses one of the specified interfaces at random and binds its socket to the IP of that interface. Individual names may be specified as either an interface name (eg 'eth0'), a subinterface name (eg 'eth0:0'), or an IP address (which may be specified using CIDR notation to match a range of IPs).",
          "default": ""
        },
        "short_circuit_shared_memory_watcher_interrupt_check_ms": {
          "type": "integer",
          "description": "The length of time in milliseconds that the short-circuit shared memory watcher will go between checking for java interruptions sent from other threads. This is provided mainly for unit tests",
          "default": 60000
        },
        "webhdfs_enabled": {
          "type": "boolean",
          "description": "Enable WebHDFS (REST API) in Namenodes and Datanodes.",
          "default": true
        },
        "fuse_connection_timeout": {
          "type": "integer",
          "description": "The minimum number of seconds that we'll cache libhdfs connection objects in fuse_dfs. Lower values will result in lower memory consumption; higher values may speed up access by avoiding the overhead of creating new connection objects.",
          "default": 300
        },
        "fuse_timer_period": {
          "type": "integer",
          "description": "The number of seconds between cache expiry checks in fuse_dfs. Lower values will result in fuse_dfs noticing changes to Kerberos ticket caches more quickly.",
          "default": 5
        },
        "metrics_percentiles_intervals": {
          "type": "string",
          "description": "Comma-delimited set of integers denoting the desired rollover intervals (in seconds) for percentile latency metrics on the Namenode and Datanode. By default, percentile latency metrics are disabled.",
          "default": ""
        },
        "encrypt_data_transfer": {
          "type": "boolean",
          "description": "Whether or not actual block data that is read/written from/to HDFS should be encrypted on the wire. This only needs to be set on the NN and DNs, clients will deduce this automatically. It is possible to override this setting per connection by specifying custom logic via dfs.trustedchannel.resolver.class.",
          "default": false
        },
        "encrypt_data_transfer_algorithm": {
          "type": "string",
          "description": "This value may be set to either '3des' or 'rc4'. If nothing is set, then the configured JCE default on the system is used (usually 3DES.) It is widely believed that 3DES is more cryptographically secure, but RC4 is substantially faster. Note that if AES is supported by both the client and server then this encryption algorithm will only be used to initially transfer keys for AES. (See dfs.encrypt.data.transfer.cipher.suites.)",
          "default": ""
        },
        "encrypt_data_transfer_cipher_suites": {
          "type": "string",
          "description": "This value may be either undefined or AES/CTR/NoPadding. If defined, then dfs.encrypt.data.transfer uses the specified cipher suite for data encryption. If not defined, then only the algorithm specified in dfs.encrypt.data.transfer.algorithm is used. By default, the property is not defined.",
          "default": ""
        },
        "encrypt_data_transfer_cipher_key_bitlength": {
          "type": "integer",
          "description": "The key bitlength negotiated by dfsclient and datanode for encryption. This value may be set to either 128, 192 or 256.",
          "default": 128
        },
        "trustedchannel_resolver_class": {
          "type": "string",
          "description": "TrustedChannelResolver is used to determine whether a channel is trusted for plain data transfer. The TrustedChannelResolver is invoked on both client and server side. If the resolver indicates that the channel is trusted, then the data transfer will not be encrypted even if dfs.encrypt.data.transfer is set to true. The default implementation returns false indicating that the channel is not trusted.",
          "default": ""
        },
        "data_transfer_protection": {
          "type": "string",
          "description": "A comma-separated list of SASL protection values used for secured connections to the DataNode when reading or writing block data. Possible values are authentication, integrity and privacy. authentication means authentication only and no integrity or privacy; integrity implies authentication and integrity are enabled; and privacy implies all of authentication, integrity and privacy are enabled. If dfs.encrypt.data.transfer is set to true, then it supersedes the setting for dfs.data.transfer.protection and enforces that all connections must use a specialized encrypted SASL handshake. This property is ignored for connections to a DataNode listening on a privileged port. In this case, it is assumed that the use of a privileged port establishes sufficient trust.",
          "default": ""
        },
        "data_transfer_saslproperties_resolver_class": {
          "type": "string",
          "description": "SaslPropertiesResolver used to resolve the QOP used for a connection to the DataNode when reading or writing block data. If not specified, the value of hadoop.security.saslproperties.resolver.class is used as the default value.",
          "default": ""
        },
        "client_file-block-storage-locations_num-threads": {
          "type": "integer",
          "description": "Number of threads used for making parallel RPCs in DistributedFileSystem#getFileBlockStorageLocations().",
          "default": 10
        },
        "client_file-block-storage-locations_timeout_millis": {
          "type": "integer",
          "description": "Timeout (in milliseconds) for the parallel RPCs made in DistributedFileSystem#getFileBlockStorageLocations().",
          "default": 1000
        },
        "client_cache_drop_behind_writes": {
          "type": "boolean",
          "description": "Just like dfs.datanode.drop.cache.behind.writes, this setting causes the page cache to be dropped behind HDFS writes, potentially freeing up more memory for other uses. Unlike dfs.datanode.drop.cache.behind.writes, this is a client-side setting rather than a setting for the entire datanode. If present, this setting will override the DataNode default. If the native libraries are not available to the DataNode, this configuration has no effect.",
          "default": false
        },
        "client_cache_drop_behind_reads": {
          "type": "boolean",
          "description": "Just like dfs.datanode.drop.cache.behind.reads, this setting causes the page cache to be dropped behind HDFS reads, potentially freeing up more memory for other uses. Unlike dfs.datanode.drop.cache.behind.reads, this is a client-side setting rather than a setting for the entire datanode. If present, this setting will override the DataNode default. If the native libraries are not available to the DataNode, this configuration has no effect.",
          "default": false
        },
        "client_cache_readahead": {
          "type": "boolean",
          "description": "When using remote reads, this setting causes the datanode to read ahead in the block file using posix_fadvise, potentially decreasing I/O wait times. Unlike dfs.datanode.readahead.bytes, this is a client-side setting rather than a setting for the entire datanode. If present, this setting will override the DataNode default. When using local reads, this setting determines how much readahead we do in BlockReaderLocal. If the native libraries are not available to the DataNode, this configuration has no effect.",
          "default": false
        },
        "client_mmap_enabled": {
          "type": "boolean",
          "description": "If this is set to false, the client won't attempt to perform memory-mapped reads.",
          "default": true
        },
        "client_mmap_cache_size": {
          "type": "integer",
          "description": "When zero-copy reads are used, the DFSClient keeps a cache of recently used memory mapped regions. This parameter controls the maximum number of entries that we will keep in that cache. The larger this number is, the more file descriptors we will potentially use for memory-mapped files. mmaped files also use virtual address space. You may need to increase your ulimit virtual address space limits before increasing the client mmap cache size. Note that you can still do zero-copy reads when this size is set to 0.",
          "default": 256
        },
        "client_mmap_cache_timeout_ms": {
          "type": "integer",
          "description": "The minimum length of time that we will keep an mmap entry in the cache between uses. If an entry is in the cache longer than this, and nobody uses it, it will be removed by a background thread.",
          "default": 3600000
        },
        "client_mmap_retry_timeout_ms": {
          "type": "integer",
          "description": "The minimum amount of time that we will wait before retrying a failed mmap operation.",
          "default": 300000
        },
        "client_short_circuit_replica_stale_threshold_ms": {
          "type": "integer",
          "description": "The maximum amount of time that we will consider a short-circuit replica to be valid, if there is no communication from the DataNode. After this time has elapsed, we will re-fetch the short-circuit replica even if it is in the cache.",
          "default": 1800000
        },
        "cachereport_intervalmsec": {
          "type": "integer",
          "description": "Determines cache reporting interval in milliseconds. After this amount of time, the DataNode sends a full report of its cache state to the NameNode. The NameNode uses the cache report to update its map of cached blocks to DataNode locations. This configuration has no effect if in-memory caching has been disabled by setting dfs.datanode.max.locked.memory to 0 (which is the default). If the native libraries are not available to the DataNode, this configuration has no effect.",
          "default": 10000
        },
        "webhdfs_user_provider_user_pattern": {
          "type": "string",
          "description": "Valid pattern for user and group names for webhdfs, it must be a valid java regex.",
          "default": "^[A-Za-z_][A-Za-z0-9._-]*[$]?$"
        },
        "client_context": {
          "type": "string",
          "description": "The name of the DFSClient context that we should use. Clients that share a context share a socket cache and short-circuit cache, among other things. You should only change this if you don't want to share with another set of threads.",
          "default": "default"
        },
        "client_read_shortcircuit": {
          "type": "boolean",
          "description": "This configuration parameter turns on short-circuit local reads.",
          "default": true
        },
        "client_read_shortcircuit_skip_checksum": {
          "type": "boolean",
          "description": "If this configuration parameter is set, short-circuit local reads will skip checksums. This is normally not recommended, but it may be useful for special setups. You might consider using this if you are doing your own checksumming outside of HDFS.",
          "default": false
        },
        "client_read_shortcircuit_streams_cache_size": {
          "type": "integer",
          "description": "The DFSClient maintains a cache of recently opened file descriptors. This parameter controls the size of that cache. Setting this higher will use more file descriptors, but potentially provide better performance on workloads involving lots of seeks.",
          "default": 256
        },
        "client_read_shortcircuit_streams_cache_expiry_ms": {
          "type": "integer",
          "description": "This controls the minimum amount of time file descriptors need to sit in the client cache context before they can be closed for being inactive for too long.",
          "default": 300000
        },
        "client_use_legacy_blockreader_local": {
          "type": "boolean",
          "description": "Legacy short-circuit reader implementation based on HDFS-2246 is used if this configuration parameter is true. This is for the platforms other than Linux where the new implementation based on HDFS-347 is not available.",
          "default": false
        },
        "block_local-path-access_user": {
          "type": "string",
          "description": "Comma separated list of the users allowd to open block files on legacy short-circuit local read.",
          "default": ""
        },
        "client_domain_socket_data_traffic": {
          "type": "boolean",
          "description": "This control whether we will try to pass normal data traffic over UNIX domain socket rather than over TCP socket on node-local data transfer. This is currently experimental and turned off by default.",
          "default": false
        },
        "client_slow_io_warning_threshold_ms": {
          "type": "integer",
          "description": "The threshold in milliseconds at which we will log a slow io warning in a dfsclient. By default, this parameter is set to 30000 milliseconds (30 seconds).",
          "default": 30000
        },
        "encryption_key_provider_uri": {
          "type": "string",
          "description": "The KeyProvider to use when interacting with encryption keys used when reading and writing to an encryption zone.",
          "default": ""
        },
        "storage_policy_enabled": {
          "type": "boolean",
          "description": "Allow users to change the storage policy on files and directories.",
          "default": true
        }
      },
      "required": [
        "name_node_rpc_port",
        "name_node_http_port",
        "journal_node_rpc_port",
        "journal_node_http_port",
        "data_node_rpc_port",
        "data_node_http_port",
        "data_node_ipc_port",
        "permissions_enabled",
        "name_node_heartbeat_recheck_interval",
        "compress_image",
        "image_compression_codec",
        "hadoop_root_logger",
        "ipc_client_connect_max_retries",
        "namenode_logging_level",
        "namenode_rpc-bind-host_name_node_0",
        "namenode_rpc-bind-host_name_node_1",
        "namenode_http-bind-host_name_node_0",
        "namenode_http-bind-host_name_node_1",
        "hadoop_hdfs_configuration_version",
        "client_cached_conn_retry",
        "default_chunk_view_size",
        "permissions_superusergroup",
        "block_access_token_enable",
        "block_access_key_update_interval",
        "block_access_token_lifetime",
        "replication",
        "replication_max",
        "blocksize",
        "client_block_write_retries",
        "client_block_write_replace-datanode-on-failure_enable",
        "client_block_write_replace-datanode-on-failure_policy",
        "client_block_write_replace-datanode-on-failure_best-effort",
        "blockreport_intervalMsec",
        "blockreport_initialDelay",
        "blockreport_split_threshold",
        "heartbeat_interval",
        "namenode_datanode_registration_ip-hostname-check",
        "stream-buffer-size",
        "bytes-per-checksum",
        "client-write-packet-size",
        "client_write_exclude_nodes_cache_expiry_interval_millis",
        "image_transfer_timeout",
        "image_transfer_bandwidthPerSec",
        "image_transfer_chunksize",
        "client_failover_max_attempts",
        "client_failover_sleep_base_millis",
        "client_failover_sleep_max_millis",
        "client_failover_connection_retries",
        "client_failover_connection_retries_on_timeouts",
        "client_datanode-restart_timeout",
        "ha_log-roll_period",
        "ha_tail-edits_period",
        "support_append",
        "short_circuit_shared_memory_watcher_interrupt_check_ms",
        "webhdfs_enabled",
        "fuse_connection_timeout",
        "fuse_timer_period",
        "encrypt_data_transfer",
        "encrypt_data_transfer_cipher_key_bitlength",
        "client_file-block-storage-locations_num-threads",
        "client_file-block-storage-locations_timeout_millis",
        "client_mmap_enabled",
        "client_mmap_cache_size",
        "client_mmap_cache_timeout_ms",
        "client_mmap_retry_timeout_ms",
        "client_short_circuit_replica_stale_threshold_ms",
        "cachereport_intervalmsec",
        "webhdfs_user_provider_user_pattern",
        "client_context",
        "client_read_shortcircuit",
        "client_read_shortcircuit_skip_checksum",
        "client_read_shortcircuit_streams_cache_size",
        "client_read_shortcircuit_streams_cache_expiry_ms",
        "client_use_legacy_blockreader_local",
        "client_domain_socket_data_traffic",
        "client_slow_io_warning_threshold_ms",
        "storage_policy_enabled"
      ]
    }
  }
}
